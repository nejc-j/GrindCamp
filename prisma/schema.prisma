// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Tournament {
  id                String       @default(cuid()) @id
  name              String       // Tournament name
  numberOfCourts    Int          // Number of courts
  startTime         DateTime     // Start time
  matchDuration     Int          // Match duration (in minutes)
  breakDuration     Int          // Break duration (in minutes)
  participants      Participant[] // Participants

  locationName      String       // Location name
  street            String       // Street and number
  city              String       // City
  zipCode           String       // Zip code

  organizerId       String
  organizer         User         @relation(fields: [organizerId], references: [id])
  createdAt         DateTime     @default(now()) @map(name: "created_at")
  updatedAt         DateTime     @updatedAt @map(name: "updated_at")
}

model Participant {
  id                String       @default(cuid()) @id
  name              String       // Name of the participant (individual or team)
  tournamentId      String
  tournament        Tournament   @relation(fields: [tournamentId], references: [id])
  createdAt         DateTime     @default(now()) @map(name: "created_at")
  updatedAt         DateTime     @updatedAt @map(name: "updated_at")
}


enum ParticipantType {
  INDIVIDUAL
  TEAM
}

model User {
  id                String       @default(cuid()) @id
  name              String?
  password          String
  verified  Boolean  @default(false)
  verificationToken  String?   @unique
  email             String?      @unique
  createdAt         DateTime     @default(now()) @map(name: "created_at")
  updatedAt         DateTime     @updatedAt @map(name: "updated_at")
  tournaments       Tournament[] // Tournaments organized by the user
  @@map(name: "users")
}